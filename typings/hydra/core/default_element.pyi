"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import List, Optional, Pattern, Union
from omegaconf import DictConfig

@dataclass
class ResultDefault:
    config_path: Optional[str] = ...
    parent: Optional[str] = ...
    package: Optional[str] = ...
    is_self: bool = ...
    primary: bool = ...
    override_key: Optional[str] = ...
    def __repr__(self) -> str:
        ...
    


@dataclass
class InputDefault:
    package: Optional[str] = ...
    parent_base_dir: Optional[str] = ...
    parent_package: Optional[str] = ...
    package_header: Optional[str] = ...
    primary: bool = ...
    def is_self(self) -> bool:
        ...
    
    def update_parent(self, parent_base_dir: Optional[str], parent_package: Optional[str]) -> None:
        ...
    
    def is_optional(self) -> bool:
        ...
    
    def get_group_path(self) -> str:
        ...
    
    def get_config_path(self) -> str:
        ...
    
    def get_default_package(self) -> str:
        ...
    
    def get_final_package(self, default_to_package_header: bool = ...) -> str:
        """
        :param default_to_package_header: if package is not present, fallback to package header
        :return:
        """
        ...
    
    def get_name(self) -> Optional[str]:
        ...
    
    def is_virtual(self) -> bool:
        ...
    
    def is_deleted(self) -> bool:
        ...
    
    def set_package_header(self, package_header: Optional[str]) -> None:
        ...
    
    def get_package_header(self) -> Optional[str]:
        ...
    
    def get_package(self, default_to_package_header: bool = ...) -> Optional[str]:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def is_interpolation(self) -> bool:
        ...
    
    def is_missing(self) -> bool:
        """
        True if the name of the config is '???'
        :return:
        """
        ...
    
    def resolve_interpolation(self, known_choices: DictConfig) -> None:
        ...
    
    def get_override_key(self) -> str:
        ...
    
    def get_relative_override_key(self) -> str:
        ...
    
    def is_override(self) -> bool:
        ...
    


@dataclass
class VirtualRoot(InputDefault):
    def is_virtual(self) -> bool:
        ...
    
    def is_self(self) -> bool:
        ...
    
    def is_optional(self) -> bool:
        ...
    
    def get_group_path(self) -> str:
        ...
    
    def get_config_path(self) -> str:
        ...
    
    def get_final_package(self, default_to_package_header: bool = ...) -> str:
        ...
    
    def get_name(self) -> str:
        ...
    
    def is_missing(self) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def resolve_interpolation(self, known_choices: DictConfig) -> None:
        ...
    
    def is_override(self) -> bool:
        ...
    


@dataclass(repr=False)
class ConfigDefault(InputDefault):
    path: Optional[str] = ...
    optional: bool = ...
    deleted: Optional[bool] = ...
    def __post_init__(self) -> None:
        ...
    
    def is_self(self) -> bool:
        ...
    
    def is_optional(self) -> bool:
        ...
    
    def get_group_path(self) -> str:
        ...
    
    def get_name(self) -> Optional[str]:
        ...
    
    def get_config_path(self) -> str:
        ...
    
    def get_final_package(self, default_to_package_header: bool = ...) -> str:
        ...
    
    def is_interpolation(self) -> bool:
        ...
    
    def resolve_interpolation(self, known_choices: DictConfig) -> None:
        ...
    
    def is_missing(self) -> bool:
        ...
    
    def is_override(self) -> bool:
        ...
    


_legacy_interpolation_pattern: Pattern[str] = ...
@dataclass(repr=False)
class GroupDefault(InputDefault):
    group: Optional[str] = ...
    value: Optional[Union[str, List[str]]] = ...
    optional: bool = ...
    override: bool = ...
    deleted: Optional[bool] = ...
    config_name_overridden: bool = ...
    def __post_init__(self) -> None:
        ...
    
    def is_self(self) -> bool:
        ...
    
    def is_optional(self) -> bool:
        ...
    
    def is_override(self) -> bool:
        ...
    
    def get_group_path(self) -> str:
        ...
    
    def get_config_path(self) -> str:
        ...
    
    def is_name(self) -> bool:
        ...
    
    def is_options(self) -> bool:
        ...
    
    def get_name(self) -> Optional[str]:
        ...
    
    def get_options(self) -> List[str]:
        ...
    
    def get_final_package(self, default_to_package_header: bool = ...) -> str:
        ...
    
    def is_interpolation(self) -> bool:
        """
        True if config_name is an interpolation
        """
        ...
    
    def resolve_interpolation(self, known_choices: DictConfig) -> None:
        ...
    
    def is_missing(self) -> bool:
        ...
    
    def get_relative_override_key(self) -> str:
        ...
    


@dataclass
class DefaultsTreeNode:
    node: InputDefault
    children: Optional[List[Union[DefaultsTreeNode, InputDefault]]] = ...
    parent: Optional[DefaultsTreeNode] = ...
    def parent_node(self) -> Optional[InputDefault]:
        ...
    


