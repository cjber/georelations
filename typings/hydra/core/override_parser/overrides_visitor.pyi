"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional, Tuple, Union
from antlr4.error.ErrorListener import ErrorListener
from hydra._internal.grammar.functions import Functions
from hydra.core.override_parser.types import ChoiceSweep, IntervalSweep, Key, Override, ParsedElementType, QuotedString, RangeSweep

class HydraOverrideVisitor(OverrideParserVisitor):
    def __init__(self, functions: Functions) -> None:
        ...
    
    def visitPackage(self, ctx: OverrideParser.PackageContext) -> str:
        ...
    
    def visitPackageOrGroup(self, ctx: OverrideParser.PackageOrGroupContext) -> str:
        ...
    
    def visitKey(self, ctx: OverrideParser.KeyContext) -> Key:
        ...
    
    def is_ws(self, c: Any) -> bool:
        ...
    
    def visitPrimitive(self, ctx: OverrideParser.PrimitiveContext) -> Optional[Union[QuotedString, int, bool, float, str]]:
        ...
    
    def visitListContainer(self, ctx: OverrideParser.ListContainerContext) -> List[ParsedElementType]:
        ...
    
    def visitDictContainer(self, ctx: OverrideParser.DictContainerContext) -> Dict[str, ParsedElementType]:
        ...
    
    def visitDictKey(self, ctx: OverrideParser.DictKeyContext) -> Any:
        ...
    
    def visitDictKeyValuePair(self, ctx: OverrideParser.DictKeyValuePairContext) -> Tuple[str, ParsedElementType]:
        ...
    
    def visitElement(self, ctx: OverrideParser.ElementContext) -> ParsedElementType:
        ...
    
    def visitValue(self, ctx: OverrideParser.ValueContext) -> Union[ChoiceSweep, RangeSweep, IntervalSweep, ParsedElementType]:
        ...
    
    def visitOverride(self, ctx: OverrideParser.OverrideContext) -> Override:
        ...
    
    def is_matching_terminal(self, node: Any, symbol_type: int) -> bool:
        ...
    
    def visitSimpleChoiceSweep(self, ctx: OverrideParser.SimpleChoiceSweepContext) -> ChoiceSweep:
        ...
    
    def visitFunction(self, ctx: OverrideParser.FunctionContext) -> Any:
        ...
    


class HydraErrorListener(ErrorListener):
    def syntaxError(self, recognizer: Any, offending_symbol: Any, line: Any, column: Any, msg: Any, e: Any) -> None:
        ...
    
    def reportAmbiguity(self, recognizer: Any, dfa: Any, startIndex: Any, stopIndex: Any, exact: Any, ambigAlts: Any, configs: Any) -> None:
        ...
    
    def reportAttemptingFullContext(self, recognizer: Any, dfa: Any, startIndex: Any, stopIndex: Any, conflictingAlts: Any, configs: Any) -> None:
        ...
    
    def reportContextSensitivity(self, recognizer: Any, dfa: Any, startIndex: Any, stopIndex: Any, prediction: Any, configs: Any) -> None:
        ...
    


