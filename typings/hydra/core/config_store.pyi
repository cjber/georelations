"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Dict, List, Optional
from omegaconf import DictConfig
from hydra.core.object_type import ObjectType
from hydra.core.singleton import Singleton

class ConfigStoreWithProvider:
    def __init__(self, provider: str) -> None:
        ...
    
    def __enter__(self) -> ConfigStoreWithProvider:
        ...
    
    def store(self, name: str, node: Any, group: Optional[str] = ..., package: Optional[str] = ...) -> None:
        ...
    
    def __exit__(self, exc_type: Any, exc_value: Any, exc_traceback: Any) -> Any:
        ...
    


@dataclass
class ConfigNode:
    name: str
    node: DictConfig
    group: Optional[str]
    package: Optional[str]
    provider: Optional[str]
    ...


class ConfigStore(metaclass=Singleton):
    @staticmethod
    def instance(*args: Any, **kwargs: Any) -> ConfigStore:
        ...
    
    repo: Dict[str, Any]
    def __init__(self) -> None:
        ...
    
    def store(self, name: str, node: Any, group: Optional[str] = ..., package: Optional[str] = ..., provider: Optional[str] = ...) -> None:
        """
        Stores a config node into the repository
        :param name: config name
        :param node: config node, can be DictConfig, ListConfig,
            Structured configs and even dict and list
        :param group: config group, subgroup separator is '/',
            for example hydra/launcher
        :param package: Config node parent hierarchy.
            Child separator is '.', for example foo.bar.baz
        :param provider: the name of the module/app providing this config.
            Helps debugging.
        """
        ...
    
    def load(self, config_path: str) -> ConfigNode:
        ...
    
    def get_type(self, path: str) -> ObjectType:
        ...
    
    def list(self, path: str) -> List[str]:
        ...
    


