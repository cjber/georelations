"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from dataclasses import dataclass
from typing import Any, Dict, Optional, Sequence, Union
from omegaconf import DictConfig
from hydra.core.singleton import Singleton
from hydra.types import TaskFunction

log = ...
def simple_stdout_log_config(level: int = ...) -> None:
    ...

def configure_log(log_config: DictConfig, verbose_config: Union[bool, str, Sequence[str]] = ...) -> None:
    ...

def filter_overrides(overrides: Sequence[str]) -> Sequence[str]:
    """
    :param overrides: overrides list
    :return: returning a new overrides list with all the keys starting with hydra. filtered.
    """
    ...

def run_job(config: DictConfig, task_function: TaskFunction, job_dir_key: str, job_subdir_key: Optional[str], configure_logging: bool = ...) -> JobReturn:
    ...

def get_valid_filename(s: str) -> str:
    ...

def setup_globals() -> None:
    ...

@dataclass
class JobReturn:
    overrides: Optional[Sequence[str]] = ...
    return_value: Any = ...
    cfg: Optional[DictConfig] = ...
    hydra_cfg: Optional[DictConfig] = ...
    working_dir: Optional[str] = ...
    task_name: Optional[str] = ...


class JobRuntime(metaclass=Singleton):
    def __init__(self) -> None:
        ...
    
    def get(self, key: str) -> Any:
        ...
    
    def set(self, key: str, value: Any) -> None:
        ...
    


def validate_config_path(config_path: Optional[str]) -> None:
    ...

@contextmanager
def env_override(env: Dict[str, str]) -> Any:
    """Temporarily set environment variables inside the context manager and
    fully restore previous environment afterwards
    """
    ...

