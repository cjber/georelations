"""
This type stub file was generated by pyright.
"""

from typing import List, MutableSequence, Optional
from hydra.core.config_search_path import ConfigSearchPath, SearchPathElement, SearchPathQuery

class ConfigSearchPathImpl(ConfigSearchPath):
    config_search_path: List[SearchPathElement]
    def __init__(self) -> None:
        ...
    
    def get_path(self) -> MutableSequence[SearchPathElement]:
        ...
    
    def find_last_match(self, reference: SearchPathQuery) -> int:
        ...
    
    def find_first_match(self, reference: SearchPathQuery) -> int:
        ...
    
    def find_match(self, reference: SearchPathQuery, reverse: bool) -> int:
        ...
    
    def append(self, provider: str, path: str, anchor: Optional[SearchPathQuery] = ...) -> None:
        ...
    
    def prepend(self, provider: str, path: str, anchor: Optional[SearchPathQuery] = ...) -> None:
        """
        Prepends to the search path.
        Note, this currently only takes effect if called before the ConfigRepository is instantiated.

        :param provider: who is providing this search path, can be Hydra,
               the @hydra.main() function, or individual plugins or libraries.
        :param path: path element, can be a file system path or a package path (For example pkg://hydra.conf)
        :param anchor: if string, acts as provider. if SearchPath can be used to match against provider and / or path
        """
        ...
    
    def __str__(self) -> str:
        ...
    


