"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import List, Optional
from hydra.core.config_search_path import ConfigSearchPath
from hydra.core.object_type import ObjectType
from hydra.plugins.config_source import ConfigResult, ConfigSource

class IConfigRepository(ABC):
    @abstractmethod
    def get_schema_source(self) -> ConfigSource:
        ...
    
    @abstractmethod
    def load_config(self, config_path: str) -> Optional[ConfigResult]:
        ...
    
    @abstractmethod
    def group_exists(self, config_path: str) -> bool:
        ...
    
    @abstractmethod
    def config_exists(self, config_path: str) -> bool:
        ...
    
    @abstractmethod
    def get_group_options(self, group_name: str, results_filter: Optional[ObjectType] = ...) -> List[str]:
        ...
    
    @abstractmethod
    def get_sources(self) -> List[ConfigSource]:
        ...
    
    @abstractmethod
    def initialize_sources(self, config_search_path: ConfigSearchPath) -> None:
        ...
    


class ConfigRepository(IConfigRepository):
    config_search_path: ConfigSearchPath
    sources: List[ConfigSource]
    def __init__(self, config_search_path: ConfigSearchPath) -> None:
        ...
    
    def initialize_sources(self, config_search_path: ConfigSearchPath) -> None:
        ...
    
    def get_schema_source(self) -> ConfigSource:
        ...
    
    def load_config(self, config_path: str) -> Optional[ConfigResult]:
        ...
    
    def group_exists(self, config_path: str) -> bool:
        ...
    
    def config_exists(self, config_path: str) -> bool:
        ...
    
    def get_group_options(self, group_name: str, results_filter: Optional[ObjectType] = ...) -> List[str]:
        ...
    
    def get_sources(self) -> List[ConfigSource]:
        ...
    
    @dataclass
    class Keywords:
        optional: bool = ...
        override: bool = ...
        group: str = ...
    
    


class CachingConfigRepository(IConfigRepository):
    def __init__(self, delegate: IConfigRepository) -> None:
        ...
    
    def get_schema_source(self) -> ConfigSource:
        ...
    
    def initialize_sources(self, config_search_path: ConfigSearchPath) -> None:
        ...
    
    def load_config(self, config_path: str) -> Optional[ConfigResult]:
        ...
    
    def group_exists(self, config_path: str) -> bool:
        ...
    
    def config_exists(self, config_path: str) -> bool:
        ...
    
    def get_group_options(self, group_name: str, results_filter: Optional[ObjectType] = ...) -> List[str]:
        ...
    
    def get_sources(self) -> List[ConfigSource]:
        ...
    


