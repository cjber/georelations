"""
This type stub file was generated by pyright.
"""

import logging
from argparse import ArgumentParser
from typing import Any, Callable, DefaultDict, List, Optional, Sequence, Type
from omegaconf import DictConfig
from hydra.core.config_loader import ConfigLoader
from hydra.core.config_search_path import ConfigSearchPath
from hydra.core.utils import JobReturn
from hydra.plugins.completion_plugin import CompletionPlugin
from hydra.types import RunMode, TaskFunction

log: Optional[logging.Logger] = ...
class Hydra:
    @classmethod
    def create_main_hydra_file_or_module(cls: Type[Hydra], calling_file: Optional[str], calling_module: Optional[str], config_path: Optional[str], job_name: str) -> Hydra:
        ...
    
    @classmethod
    def create_main_hydra2(cls, task_name: str, config_search_path: ConfigSearchPath) -> Hydra:
        ...
    
    def __init__(self, task_name: str, config_loader: ConfigLoader) -> None:
        """
        :param task_name: task name
        :param config_loader: config loader
        """
        ...
    
    def run(self, config_name: Optional[str], task_function: TaskFunction, overrides: List[str], with_log_configuration: bool = ...) -> JobReturn:
        ...
    
    def multirun(self, config_name: Optional[str], task_function: TaskFunction, overrides: List[str], with_log_configuration: bool = ...) -> Any:
        ...
    
    @staticmethod
    def get_sanitized_hydra_cfg(src_cfg: DictConfig) -> DictConfig:
        ...
    
    def show_cfg(self, config_name: Optional[str], overrides: List[str], cfg_type: str, package: Optional[str]) -> None:
        ...
    
    @staticmethod
    def get_shell_to_plugin_map(config_loader: ConfigLoader) -> DefaultDict[str, List[CompletionPlugin]]:
        ...
    
    def shell_completion(self, config_name: Optional[str], overrides: List[str]) -> None:
        ...
    
    @staticmethod
    def format_args_help(args_parser: ArgumentParser) -> str:
        ...
    
    def list_all_config_groups(self, parent: str = ...) -> Sequence[str]:
        ...
    
    def format_config_groups(self, predicate: Callable[[str], bool], compact: bool = ...) -> str:
        ...
    
    def get_help(self, help_cfg: DictConfig, cfg: DictConfig, args_parser: ArgumentParser) -> str:
        ...
    
    def hydra_help(self, config_name: Optional[str], args_parser: ArgumentParser, args: Any) -> None:
        ...
    
    def app_help(self, config_name: Optional[str], args_parser: ArgumentParser, args: Any) -> None:
        ...
    
    def compose_config(self, config_name: Optional[str], overrides: List[str], run_mode: RunMode, with_log_configuration: bool = ..., from_shell: bool = ...) -> DictConfig:
        """
        :param config_name:
        :param overrides:
        :param run_mode: compose config for run or for multirun?
        :param with_log_configuration: True to configure logging subsystem from the loaded config
        :param from_shell: True if the parameters are passed from the shell. used for more helpful error messages
        :return:
        """
        ...
    
    def show_info(self, info: str, config_name: Optional[str], overrides: List[str]) -> None:
        ...
    


